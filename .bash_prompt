#!/bin/bash

color_reset="\033[m"
color_dirty="\033[1;31m"    # red
color_clean="\033[1;32m"    # green
color_branch="\e[38;5;14m"  # light blue
color_folder="\e[38;5;19m"  # dark blue

case $(hostname) in
	"willow" | "willow.local" )
		color_user_host="\e[38;5;137m" # tan
		hostname="willow"
	;;

	"flanders" | "flanders.local" )
		color_user_host="\e[38;5;27m" # light blue
		hostname="flanders"
	;;

	"vvv" )
		color_user_host="\e[38;5;166m" # orange
		hostname="vvv"
	;;

	"durin" )
		color_user_host="\e[38;5;64m"  # lime green
		hostname="iandunn.name"
	;;

	"iandunn.dev.ord.wordpress.org" )
		color_user_host="\e[38;5;94m"  # brown
		hostname="iandunn.dev.ord.wordpress.org"
	;;

	"iandunn.dev.dfw.wordpress.com" )
		color_user_host="\e[0;33m"     # yellow
		hostname="iandunn.dev.dfw.wordpress.com"
	;;

	"holly" )
		color_user_host="\e[38;5;53m"  # purple
		hostname="carlybish.com"
	;;

	* )
		color_user_host="\e[38;5;242m" # grey
		hostname=$(hostname)
	;;
esac

function in_git_repo {
	# Return true if we're in a Git repo
	if [[ $(git rev-parse --is-inside-work-tree 2> /dev/null) == "true" ]]; then

		# Return false if we're inside the VVV container, but not at the root and not in a separate leaf-level repo
		if [[ $(git rev-parse --show-toplevel 2> /dev/null) == "/Users/ian/vhosts/virtual-machines/vvv-personal" ]]; then
			if [[ $(pwd) != "/Users/ian/vhosts/virtual-machines/vvv-personal" ]]; then
				return 1
			fi
		fi

		return 0
	fi

	return 1
}

function git_status {
	$(in_git_repo)
	if [[ "$?" != 0 ]]; then
		exit
	fi

	# Get the current branch/tag
	ref="$(git symbolic-ref HEAD 2> /dev/null | sed -e 's/refs\/heads\///')"
	if [[ "$ref" == "" ]]; then
		ref="$(git describe --tags)"

		# todo if on individual commit, show the rev -- https://stackoverflow.com/questions/11168141/find-which-commit-is-currently-checked-out-in-git
		# todo if tag, getting a "-bash: //: Is a directory" error

		# todo need to support submodules like publish-iandunn-2017 -- "HEAD detached at c170c1c"

		# todo during rebase getting:
		# fatal: No names found, cannot describe anything.
		# -bash: =(no branch): command not found

		if [[ "$ref" == "" ]]; then
			$ref="(no branch)"
		fi
	fi

	branch="${color_branch}$ref${color_reset}"

	# Determine if clean or dirty
	state=$(git status --long 2> /dev/null | tail -n1)
	if [[ $state == *"working directory clean"* || $state == *"working tree clean"* ]]; then
		state="${color_clean}clean${color_reset}"
	else
		state="${color_dirty}dirty${color_reset}"
	fi

	if [[ -d "$(git rev-parse --show-toplevel)/.git/svn" ]]; then
		flavor="git-svn"
	else
		flavor="Git"
	fi

	echo -n "$flavor $branch is $state"

	# todo maybe add remote, like
		# git-svn wordcamp.svn.wordpress.org:master
		# git-svn meta.svn.wordpress.org:master
		# Git github.com:master is clean - how to handle multiple remotes?
	# add paths too? sometimes that's helpful, like with github.com

	# todo if there's a git-svn remote and a native git remote, only the git-svn one is shown
}

function svn_status {
	SVN_INFO=$(svn info 2> /dev/null)

	if [[ -z $SVN_INFO ]]; then
		exit
	fi

	# Get the current branch
	branch=$(echo "$SVN_INFO" | grep '^URL:' | egrep -o '(tags|branches)/[^/]+|trunk' | egrep -o '[^/]+$')
	if [[ -z $branch ]]; then
		branch="trunk"
	fi
	branch="${color_branch}$branch${color_reset}"

	# Determine if clean or dirty
	# todo svn stat is the slowest part. any way to optimize this?
	# maybe can cache some of it in env variables? prob not 'cause status can change so often, but worth considering
	# search for other people's svn bash_prompt's and look at how they do it
	# could also post question on stackoverflow for help
	# todo this will report clean if an external is modified, which could lead to missed errors. too slow to include externals though? maybe just warn that it's only internal repo that's clean?
	if [[ $(svn stat --ignore-externals | grep -v 'X       ' | grep -v '    X   ' ) ]]; then
		state="${color_dirty}dirty${color_reset}"
	else
		state="${color_clean}clean${color_reset}"
	fi

	# todo show whether repo is public or private? to help avoid accidentally commiting private to public

	echo -n "SVN $branch is $state"
}

function vcs_prompt {
	GIT_PROMPT=$(git_status)
	SVN_PROMPT=$(svn_status)

	if [[ -n $GIT_PROMPT ]]; then
		echo -n "\n$GIT_PROMPT"

		if [[ -n $SVN_PROMPT ]]; then
			echo -n ", $SVN_PROMPT"
		fi
	elif [[ -n $SVN_PROMPT ]]; then
		echo "\n$SVN_PROMPT"
	fi
}

function set_prompt {
	# Set marks at each prompt to enable jumping between previous commands
	command_mark=""
	if [[ 'iTerm.app' = $TERM_PROGRAM ]]; then
		# Note: This requires installing the shell integration from the iTerm2 menu.
		command_mark="$(iterm2_prompt_mark)"
	fi

	export PS1="\n${command_mark}${color_user_host}\u${color_reset} @ ${color_user_host}$hostname${color_reset} in ${color_folder}\w${color_reset} \
	$(vcs_prompt) \
	\n> "
}

# Set the prompt after every command, so the Git/SVN status is updated
export PROMPT_COMMAND="set_prompt"
