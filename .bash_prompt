#!/bin/bash

#
# Bash is fundamentally awful, but this probably needs to be written in Bash instead of a modern
# scripting language for performance. Don't want to load PHP on top of everything else.
# Could look into Fish though.
#

color_reset="\033[m"
color_dirty="\033[1;31m"    # red
color_clean="\033[1;32m"    # green
color_branch="\e[38;5;14m"  # light blue
color_folder="\e[38;5;19m"  # dark blue

case $(hostname) in
	"willow" | "willow.local" )
		color_user_host="\e[38;5;137m" # tan
		hostname="willow"
	;;

	"flanders" | "flanders.local" )
		color_user_host="\e[38;5;27m" # light blue
		hostname="flanders"
	;;

	"vvv" )
		color_user_host="\e[38;5;166m" # orange
		hostname="vvv"
	;;

	"durin" )
		color_user_host="\e[38;5;64m"  # lime green
		hostname="iandunn.name"
	;;

	"iandunn.dev.ord.wordpress.org" )
		color_user_host="\e[38;5;94m"  # brown
		hostname="iandunn.dev.ord.wordpress.org"
	;;

	"iandunn.dev.dfw.wordpress.com" )
		color_user_host="\e[0;33m"     # yellow
		hostname="iandunn.dev.dfw.wordpress.com"
	;;

	"holly" )
		color_user_host="\e[38;5;53m"  # purple
		hostname="carlybish.com"
	;;

	* )
		color_user_host="\e[38;5;242m" # grey
		hostname=$(hostname)
	;;
esac

# Parsing `git status --long` isn't as elegant as using porcelan commands, etc, but it's much faster. That's
# critical because larger repos can make every prompt painfully slow.
#
# If ever feel like this is slow, then you could do something similar to `svn_status`, but with `git gc`. Probably
# prompt first, though because you don't wanna lose anything in reflog that might be needed soon.
function git_status {
	status=$(git status --long --verbose --branch --show-stash 2>&1)

	# todo-enhance break these into modular functions

	# todo-enhance maybe add remote, like
	# git-svn wordcamp.svn.wordpress.org:master
	# git-svn meta.svn.wordpress.org:master
	# Git github.com:master is clean - how to handle multiple remotes?
	# add paths too? sometimes that's helpful, like with github.com

	# Bail if not a Git repo.
	if [[ $status == *"Not a git repository"* || $status == *"not a git repository"* || $status == *"must be run in a work tree"* ]]; then
		return
	fi

	# todo maybe do somehting similar to svn_status, because git can get real slow too on big repos, like gutenberg
	# seems to show up more with tab completion on branches, and checking out, etc, though, rather than status
	# if still noticable on status, could time it and run `git gc`, maybe with the `--aggressive` option
		# no, --aggressive is takes 10 fracking minutes. but could maybe echo "ran gc, but you may want to run gc --aggressive if its still slow. that will take several minutes"

	root_folder=$(git rev-parse --show-toplevel)

	# For some inexplicable fracking reason, this syntax is how you tell Bash that you want to explode a string
	# into an array, so that you can reference the individual words.
	set -- $status

	# Figure out where we are / what we're doing.
	if [[ $status == *"HEAD detached at"* ]]; then
		location=${4}

	elif [[ $status == *"rebase in progress"* || $status == *"currently rebasing"* ]]; then
		location="rebasing onto ${6}"

	elif [[ $status == *"currently cherry-picking"* ]]; then
		# todo-bug remove the `.` at the end of the word
		location="cherry-picking ${9}"

	# This has to come after above, because there are situations where you're cherry-picking but still on branch
	# (e.g., fixing conflicts).
	elif [[ $status == *"On branch"* ]]; then
		location=${3}

	else
		location="[unknown]"
		# todo get here when "head detached _FROM_ X" instead of "detached _AT_ X"
		# would it be accurate to just add that to the one above, or would that be misleading, by making you think you're at X, when you're not
			# that would be misleading, b/c you're not at X, you're at a totoally diffierent commit. X is just the one you were previiously at before running the last git command
			# maybe show "detached at {the hash of HEAD, which will be 1 forward of X}"

		# @IanDunn: This depends on your Git version. git status got smarter around Git 2.0, and then again a bit later: besides examining HEAD itself, git status looks into the reflog entries for HEAD.
		# These tell Git whether you just recently ran a git checkout that detached HEAD, and it's still there at the commit you specified; or whether you did the git checkout, then moved HEAD around some more.
		# The at <name> means "still there" and the from <name> means "was there, got moved since then". â€“ torek 11 mins ago
		#
		# Different Git vintages produce slightly different messages here. The really old ones never bother to look at the reflog entries at all, and just say "detached", without any more detail.
		# https://stackoverflow.com/questions/44738188/diagnose-a-misterious-detached-head-in-git/44739639?noredirect=1#comment108149704_44739639


		# when "detached _FROM_ is because you checked out a tag, though, it should should the tag name
			# sometimes it does say "deatached at v8.0.0", maybe depends on how you check it out, or what you were on previously?
			#
			# git describe --tags
			# git describe --exact-match --tags $(git log -n1 --pretty='%h')
			# https://stackoverflow.com/a/3405221/450127
			#

	fi

	# Got stashes?
	stashes=""
	if [[ -f "$root_folder/.git/logs/refs/stash" ]]; then
		stashes=" (stashes)"
	fi

	# Conflicts?
	conflicts=""
	if [[ $status == *"fix conflicts"* ]]; then
		conflicts=" (conflicts)"
	fi

	# Bisecting?
	bisecting=""
	if [[ $status == *"currently bisecting"* ]]; then
		bisecting=" (bisecting)";
	fi

	branch="${color_branch}${location}${color_reset}"

	# Determine if clean or dirty.
	if [[ $status == *"working directory clean"* || $status == *"working tree clean"* ]]; then
		state="${color_clean}clean${color_reset}"
	else
		state="${color_dirty}dirty${color_reset}"
	fi

	# Determine Git vs git-svn.
	if [[ -d "$root_folder/.git/svn" ]]; then
		flavor="git-svn"
	else
		flavor="Git"
	fi
	# todo-bug if there's a git-svn remote and a native git remote, only the git-svn one is shown. should show both.

	echo -n "$flavor $branch is $state$stashes$conflicts$bisecting"
}

function svn_status {
	local counter=$SECONDS;

	# todo-optimize
	# This is still slow on large repos like wp-develop
	# even on smaller ones like wordcamp.org
	# `svn info` may be a little slow, but it's `svn stat` that is really awful
	# Running `svn cleanup --include-externals` automatically helps a lot, but may eventually want to do more
	# Maybe there's a way to determine clean/dirty without running `svn stat`? Like checking files in the `.svn` folder, etc
	# maybe can cache some of it in env variables? prob not 'cause status can change so often, but worth considering
	# search for other people's svn bash_prompt's and look at how they do it
	# could also detect when in wp-develop and add `--depth=intermediates` arg and a warning that it didn't search the whole depth
	# could also post question on stackoverflow for help

	SVN_INFO=$(svn info 2> /dev/null)

	if [[ -z $SVN_INFO ]]; then
		exit
	fi

	# Get the current branch
	branch=$(echo "$SVN_INFO" | grep '^URL:' | egrep -o '(tags|branches)/[^/]+|trunk' | egrep -o '[^/]+$')
	if [[ -z $branch ]]; then
		branch="trunk"
	fi
	branch="${color_branch}$branch${color_reset}"

	# `svn stat` is slow because the repo is so big.
	slow_folders=(
		"/Users/iandunn/vhosts/localhost/wordcamp.test/public_html/wp-content"
		"/Users/iandunn/vhosts/localhost/wordcamp.test/public_html/wp-content/plugins"
		"/Users/iandunn/vhosts/localhost/wordcamp.test/public_html/wp-content/plugins/gutenberg"
		"/Users/iandunn/vhosts/localhost/wp-develop.test/public_html"
		"/Users/iandunn/vhosts/localhost/wp-develop.test/public_html/src"
	)

	# Only check for an exact match, since subfolders are fast enough to test.
	# Could instead add `--ignore-externals` instead, to speed it up, but then it will miss modifications there.
	# todo maybe combine ^ with this, so say something like "[] is [clean/dirty], but externals are too to check, so check those manually" (but more concise)
	if [[ " ${slow_folders[@]} " =~ " $(pwd) " ]]; then
	    state="[too slow to check]"
	else
		# Determine if clean or dirty
		if [[ $(svn stat | grep -v 'X       ' | grep -v '    X   ' | grep -v 'external item' ) ]]; then
			state="${color_dirty}dirty${color_reset}"
		else
			state="${color_clean}clean${color_reset}"
		fi
	fi

	# todo show whether repo is public or private? to help avoid accidentally commiting private to public

	echo -n "SVN $branch is $state"

	if [[ $((SECONDS-counter)) -gt 2 ]]; then
		echo "\n${color_dirty}[SVN is slow, launching async cleanup...]${color_reset}"
		bash -c "svn cleanup --include-externals >/dev/null 2>/dev/null &"
	fi
}

function vcs_prompt {
	GIT_PROMPT=$(git_status)
	SVN_PROMPT=$(svn_status)

	if [[ -n $GIT_PROMPT ]]; then
		echo -n "\n$GIT_PROMPT"

		if [[ -n $SVN_PROMPT ]]; then
			echo -n ", $SVN_PROMPT"
		fi
	elif [[ -n $SVN_PROMPT ]]; then
		echo "\n$SVN_PROMPT"
	fi
}

function set_prompt {
	# Set marks at each prompt to enable jumping between previous commands
	command_mark=""
	if [[ 'iTerm.app' = $TERM_PROGRAM ]]; then
		# Note: This requires installing the shell integration from the iTerm2 menu.
		command_mark="$(iterm2_prompt_mark)"
	fi

	export PS1="\n${command_mark}${color_user_host}\u${color_reset} @ ${color_user_host}$hostname${color_reset} in ${color_folder}\w${color_reset} \
	$(vcs_prompt) \
	\n> "
}

# Set the prompt after every command, so the Git/SVN status is updated
export PROMPT_COMMAND="set_prompt"
