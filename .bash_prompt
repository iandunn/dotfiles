#!/bin/bash

#
# Bash is fundamentally awful, but this probably needs to be written in Bash instead of a modern
# scripting language for performance. Don't want to load PHP on top of everything else.
# Could look into Fish though.
#

color_reset="\033[m"
color_dirty="\033[1;31m"    # red
color_clean="\033[1;32m"    # green
color_branch="\e[38;5;14m"  # light blue
#color_folder="\e[38;5;19m"  # dark blue
color_folder="\e[38;5;27m"   # medium blue
color_warning="\e[38;5;166m" # orange

case $(hostname) in
	# Primary workstation/laptop aren't included, since it's obvious where you are.
	"milo" | "milo.local" | "willow" | "willow.local" | "willow.jetpack" )
		:
	;;

	"durin" )
		color_user_host="\e[38;5;64m"  # lime green
		hostname="iandunn.name"
	;;

	"iandunn.dev.ord.wordpress.org" )
		color_user_host="\e[38;5;94m"  # brown
		hostname="iandunn.dev.ord.wordpress.org"
	;;

	"iandunn.dev.dfw.wordpress.com" )
		color_user_host="\e[0;33m"     # yellow
		hostname="iandunn.dev.dfw.wordpress.com"
	;;

	* )
		color_user_host="\e[38;5;242m" # grey
		hostname=$(hostname)
	;;
esac

# Make it obvious that we're in a LocalWP shell, to avoid confusion.
# This requires modifying the default `ssh-entry` scripts to add `$LOCALWP_SHELL`.
case "${LOCALWP_SHELL:-unset}" in
	"Comics" | "Core" | "DMV" | "FHL" | "Harvard" | "Williams" | "CDCR" )
		color_user_host="\e[38;5;166m" # orange
		hostname=$LOCALWP_SHELL
	;;
esac

function git_status {
	status=$(git status --porcelain=v2 --branch 2>/dev/null)

	# Bail if not a Git repo or status fails
	if [[ $? -ne 0 || -z "$status" ]]; then
		return
	fi

	git_root=$(git rev-parse --show-toplevel 2>/dev/null)
	branch_name=$(git symbolic-ref -q --short HEAD 2>/dev/null || git describe --tags --exact-match 2>/dev/null || git rev-parse --short HEAD 2>/dev/null)
	flavor="Git"

	if [[ -d "$git_root/.git/svn" ]]; then
		flavor="git-svn"
	fi

	state="${color_clean}clean${color_reset}"

	if ! git diff --no-ext-diff --quiet || ! git diff --no-ext-diff --cached --quiet; then
		state="${color_dirty}dirty${color_reset}"
	fi

	if [[ -n $(git ls-files --others --exclude-standard 2>/dev/null) ]]; then
		state="${color_dirty}dirty${color_reset}"
	fi

	special_state=""

	if [[ -f "$git_root/.git/MERGE_HEAD" ]]; then
		merge_conflicts=$(git diff --name-only --diff-filter=U 2>/dev/null)

		# todo need a status where conflicts but they not fixed yet

		if [[ -z "$merge_conflicts" ]]; then
			# todo this isn't working for "All conflicts fixed but you are still merging." status message
			# or was that just for the subdirectory issue, which is fixed now?
			special_state="merging $branch_name (conflicts fixed)"

		else
			special_state="merging $branch_name (conflicts)"
		fi
	fi

	if [[ -d "$git_root/.git/rebase-apply" || -d "$git_root/.git/rebase-merge" ]]; then
		# todo this hasn't been fully tested
		if [[ -f "$git_root/.git/rebase-apply/head-name" ]]; then
			branch_name=$(cat "$git_root/.git/rebase-apply/head-name")
		elif [[ -f "$git_root/.git/rebase-merge/head-name" ]]; then
			branch_name=$(cat "$git_root/.git/rebase-merge/head-name")
		fi

		rebase_conflicts=$(git diff --name-only --diff-filter=U 2>/dev/null)

		if [[ -z "$rebase_conflicts" ]]; then
			# this might assume that there were conflicts and they were fixed, but it could also be that there were no conflicts
			conflict_state=" (conflicts fixed)"
		else
			conflict_state=" (conflicts)"
		fi

		against=$(git rev-parse --short HEAD 2>/dev/null)
		branch_name=$(echo "$branch_name" | sed 's|refs/heads/||')
		special_state="rebasing $branch_name against $against$conflict_state"
	fi

	if [[ -f "$git_root/.git/CHERRY_PICK_HEAD" ]]; then
		# todo show hash
		special_state="cherry-picking"
	fi

	if [[ -f "$git_root/.git/REVERT_HEAD" ]]; then
		# todo if reverting then show "reverting {hash}"
		special_state="reverting"
	fi

	if [[ -f "$git_root/.git/BISECT_LOG" ]]; then
		special_state="${special_state} (bisecting)"
	fi

	# todo add entry for "detached HEAD" state

	# make sure this says tag name when on a tag rather than branch

	stashes=""

	if [[ -f "$git_root/.git/logs/refs/stash" ]]; then
		stashes=" (stashes)"
	fi

	# Display branch or special state
	if [[ -n "$special_state" ]]; then
		location="$special_state"
	else
		location="$branch_name"
	fi

	branch="${color_branch}${location}${color_reset}"

	echo -n "$flavor $branch is $state$stashes"
}

function svn_status {
	local counter=$SECONDS;

	# todo-optimize
	# This is still slow on large repos like wp-develop
	# even on smaller ones like wordcamp.org
	# `svn info` may be a little slow, but it's `svn stat` that is really awful
	# Running `svn cleanup --include-externals` automatically helps a lot, but may eventually want to do more
	# Maybe there's a way to determine clean/dirty without running `svn stat`? Like checking files in the `.svn` folder, etc
	# maybe can cache some of it in env variables? prob not 'cause status can change so often, but worth considering
	# search for other people's svn bash_prompt's and look at how they do it
	# could also detect when in wp-develop and add `--depth=intermediates` arg and a warning that it didn't search the whole depth
	# could also post question on stackoverflow for help

	SVN_INFO=$(svn info 2> /dev/null)

	if [[ -z $SVN_INFO ]]; then
		exit
	fi

	# Get the current branch
	branch=$(echo "$SVN_INFO" | grep '^URL:' | egrep -o '(tags|branches)/[^/]+|trunk' | egrep -o '[^/]+$')
	if [[ -z $branch ]]; then
		branch="trunk"
	fi
	branch="${color_branch}$branch${color_reset}"

	# `svn stat` is slow because the repo is so big.
	slow_folders=(
		"$HOME/vhosts/localhost/wordcamp.test/public_html/wp-content"
		"$HOME/vhosts/localhost/wordcamp.test/public_html/wp-content/plugins"
		"$HOME/vhosts/localhost/wordcamp.test/public_html/wp-content/plugins/gutenberg"
		"$HOME/vhosts/localhost/wp-develop.test/public_html"
		"$HOME/vhosts/localhost/wp-develop.test/public_html/src"
		"$HOME/vhosts/localhost/wp-develop-subdir.test/public_html"
		"$HOME/vhosts/localhost/wp-develop-subdir.test/public_html/src"
	)

	# Only check for an exact match, since subfolders are fast enough to test.
	# Could instead add `--ignore-externals` instead, to speed it up, but then it will miss modifications there.
	# todo maybe combine ^ with this, so say something like "[] is [clean/dirty], but externals are too to check, so check those manually" (but more concise)
	if [[ " ${slow_folders[@]} " =~ " $(pwd) " ]]; then
	    state="${color_warning}[too slow to check]${color_reset}"
	else
		# Determine if clean or dirty
		if [[ $(svn stat | grep -v 'X       ' | grep -v '    X   ' | grep -v 'external item' ) ]]; then
			state="${color_dirty}dirty${color_reset}"
		else
			state="${color_clean}clean${color_reset}"
		fi
	fi

	# todo show whether repo is public or private? to help avoid accidentally commiting private to public

	echo -n "SVN $branch is $state"

	if [[ $((SECONDS-counter)) -gt 2 ]]; then
		echo "\n${color_dirty}[SVN is slow, launching async cleanup...]${color_reset}"
		bash -c "svn cleanup --include-externals >/dev/null 2>/dev/null &"
	fi
}

function vcs_prompt {
	GIT_PROMPT=$(git_status)
	SVN_PROMPT=$(svn_status)

	if [[ -n $GIT_PROMPT ]]; then
		echo -n "\n$GIT_PROMPT"

		if [[ -n $SVN_PROMPT ]]; then
			echo -n ", $SVN_PROMPT"
		fi
	elif [[ -n $SVN_PROMPT ]]; then
		echo "\n$SVN_PROMPT"
	fi
}

function set_prompt {
	# Disable `promptvars` for security.
	#
	# Git/SVN branch names, etc are user input in many contexts (e.g., a pull request) and could
	# contain a payload crafted to expand into a command. Anything that makes it into `PS1` will
	# automatically be executed, which would result in RCE.
	#
	# @link https://hackerone.com/reports/1785378
	shopt -u promptvars

	# Set marks at each prompt to enable jumping between previous commands
	command_mark=""
	if [[ 'iTerm.app' = $TERM_PROGRAM ]]; then
		# Note: This requires installing the shell integration from the iTerm2 menu, and running the script in `.bashrc`.
		# Navigate through commands with cmd-shift-up and cmd-shift-down.
		command_mark="$(iterm2_prompt_mark)"
	fi

	at_host=""
	if [[ -n $hostname ]]; then
		at_host=" @ ${color_user_host}$hostname${color_reset}"
	fi

	export PS1="\n${command_mark}${color_user_host}\u${color_reset}${at_host} in ${color_folder}\w${color_reset} \
	$(vcs_prompt) \
	\n> "
}

# Set the prompt after every command, so the Git/SVN status is updated
export PROMPT_COMMAND="set_prompt"
