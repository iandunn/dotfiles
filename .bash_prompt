#!/bin/bash

color_reset="\033[m"
color_dirty="\033[1;31m"    # red
color_clean="\033[1;32m"    # green
color_branch="\e[38;5;14m"  # light blue
color_folder="\e[38;5;19m"  # dark blue

case $(hostname) in
	"macenzie.local" )
		color_user_host="\e[38;5;137m" # tan
		hostname="macenzie"
	;;

	"vvv" )
		color_user_host="\e[38;5;166m" # orange
	;;

	"n2"* )
		color_user_host="\e[38;5;64m"  # lime green
		hostname="iandunn.name"
	;;

	"wordcamp1.lax.wordpress.org" )
		color_user_host="\e[38;5;242m" # grey
		hostname="wordcamp.org"
	;;

	"iandunn.dev.wordpress.org" )
		color_user_host="\e[38;5;94m"  # brown
		hostname="iandunn.dev.wordpress.org"
	;;

	"iandunn.dev.dfw.wordpress.com" )
		color_user_host="\e[0;33m"     # yellow
		hostname="iandunn.dev.dfw.wordpress.com"
	;;

	"holly" )
		color_user_host="\e[38;5;53m"  # purple
		hostname="carlybish.com"
	;;

	* )
		color_user_host="\033[m"
		hostname=$(hostname)
	;;
esac

function in_git_repo {
	# Return true if we're in a Git repo
	if [[ $(git rev-parse --is-inside-work-tree 2> /dev/null) == "true" ]]; then

		# Return false if we're inside the VVV container, but not at the root and not in a separate leaf-level repo
		if [[ $(git rev-parse --show-toplevel 2> /dev/null) == "/Users/ian/vhosts/vvv-personal" ]]; then
			if [[ $(pwd) != "/Users/ian/vhosts/vvv-personal" ]]; then
				return 1
			fi
		fi

		return 0
	fi

	return 1
}

function git_status {
	$(in_git_repo)
	if [[ "$?" != 0 ]]; then
		exit
	fi

	echo -n "\nGit "

	# Get the current branch/tag
	ref="$(git symbolic-ref HEAD 2> /dev/null | sed -e 's/refs\/heads\///')"
	if [[ "$ref" == "" ]]; then
		ref="$(git describe --tags)"

		// todo if on individual commit, show the rev -- https://stackoverflow.com/questions/11168141/find-which-commit-is-currently-checked-out-in-git

		if [[ "$ref" == "" ]]; then
			$ref="(no branch)"
		fi
	fi

	branch="${color_branch}$ref${color_reset}"

	# Determine if clean or dirty
	state=$(git status 2> /dev/null | tail -n1)
	if [[ $state == *"working directory clean"* ]]; then
		state="${color_clean}clean${color_reset}"
	else
		state="${color_dirty}dirty${color_reset}"
	fi

	echo -n "$branch is $state"
}

function svn_status {
	if [[ ! $(svn info 2> /dev/null) ]]; then
		exit
	fi

	# If we're also in a Git repo, continue the existing line; otherwise, start a new line.
	$(in_git_repo)
	if [[ "$?" == 0 ]]; then
		echo -n ", SVN "
	else
		echo -n "\nSVN "
	fi

	# Get the current branch
	branch="${color_branch}$(svn info | sed -n "/^URL:/s/.*\///p")${color_reset}"		# TODO - this is wrong if in a subdir of trunk. worst case can search for 'trunk' and assume 'trunk', then 'branches' and assume 'branches/x.y', same for 'tags'

	# Determine if clean or dirty
	if [[ $(svn stat --ignore-externals | grep -v 'X       ' ) ]]; then
		state="${color_dirty}dirty${color_reset}"
	else
		state="${color_clean}clean${color_reset}"
	fi

	# todo show whether repo is public or private? to help avoid accidentally commiting private to public

	echo -n "$branch is $state"
}

function set_prompt {
	export PS1="\n${color_user_host}\u${color_reset} @ ${color_user_host}$hostname${color_reset} in ${color_folder}\w${color_reset} \
	$(git_status)$(svn_status) \
	\n> "
}

# Set the prompt after every command, so the Git/SVN status is updated
export PROMPT_COMMAND="set_prompt"
