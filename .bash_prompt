#!/bin/bash

#
# Bash is fundamentally awful, but this probably needs to be written in Bash instead of a modern
# scripting language for performance. Don't want to load PHP on top of everything else.
# Could look into Fish though.
#

# todo-optimize
# maybe add timers to git and svn portions, and if one of them takes more than X ms, prompt that you should run `git gc` or `svn cleanup --include-externals`
#   https://git-scm.com/docs/git-gc - look at diff arguments
# prompt first though b/c might lose some stuff


color_reset="\033[m"
color_dirty="\033[1;31m"    # red
color_clean="\033[1;32m"    # green
color_branch="\e[38;5;14m"  # light blue
color_folder="\e[38;5;19m"  # dark blue

case $(hostname) in
	"willow" | "willow.local" )
		color_user_host="\e[38;5;137m" # tan
		hostname="willow"
	;;

	"flanders" | "flanders.local" )
		color_user_host="\e[38;5;27m" # light blue
		hostname="flanders"
	;;

	"vvv" )
		color_user_host="\e[38;5;166m" # orange
		hostname="vvv"
	;;

	"durin" )
		color_user_host="\e[38;5;64m"  # lime green
		hostname="iandunn.name"
	;;

	"iandunn.dev.ord.wordpress.org" )
		color_user_host="\e[38;5;94m"  # brown
		hostname="iandunn.dev.ord.wordpress.org"
	;;

	"iandunn.dev.dfw.wordpress.com" )
		color_user_host="\e[0;33m"     # yellow
		hostname="iandunn.dev.dfw.wordpress.com"
	;;

	"holly" )
		color_user_host="\e[38;5;53m"  # purple
		hostname="carlybish.com"
	;;

	* )
		color_user_host="\e[38;5;242m" # grey
		hostname=$(hostname)
	;;
esac

# Parsing `git status --long` isn't as elegant as using porcelan commands, etc, but it's much faster. That's
# critical because larger repos can make every prompt painfully slow.
function git_status {
	status=$(git status --long 2>&1)

	# todo-enhance break these into modular functions

	# Bail if not a Git repo.
	if [[ $status == *"not a git repository"* ]]; then
		return
	fi

	root_folder=$(git rev-parse --show-toplevel)
	set -- $status

	# Figure out where we are / what we're doing.
	if [[ $status == *"On branch"* ]]; then
		location=${3}

	elif [[ $status == *"HEAD detached at"* ]]; then
		location=${4}

	elif [[ $status == *"rebase in progress"* || $status == *"currently rebasing"* ]]; then
		location="rebasing onto ${6}"

	else
		location="[unknown]"
	fi

	# todo-enhance add stash and bisecting as extras, but doesn't replace location
	# anything else?

	# todo-enhance maybe add remote, like
		# git-svn wordcamp.svn.wordpress.org:master
		# git-svn meta.svn.wordpress.org:master
		# Git github.com:master is clean - how to handle multiple remotes?
	# add paths too? sometimes that's helpful, like with github.com

	branch="${color_branch}${location}${color_reset}"

	# Determine if clean or dirty.
	if [[ $status == *"working directory clean"* || $status == *"working tree clean"* ]]; then
		state="${color_clean}clean${color_reset}"
	else
		state="${color_dirty}dirty${color_reset}"
	fi

	# Determine Git vs git-svn.
	if [[ -d "$root_folder/.git/svn" ]]; then
		flavor="git-svn"
	else
		flavor="Git"
	fi
	# todo-bug if there's a git-svn remote and a native git remote, only the git-svn one is shown. should show both.

	echo -n "$flavor $branch is $state"
}

function svn_status {
	local counter=$SECONDS;

	# todo-optimize
	# This is still slow on large repos like wp-develop
	# `svn info` may be a little slow, but it's `svn stat` that is really awful
	# Running `svn cleanup --include-externals` automatically helps a lot, but may eventually want to do more
	# Maybe there's a way to determine clean/dirty without running `svn stat`? Like checking files in the `.svn` folder, etc
	# maybe can cache some of it in env variables? prob not 'cause status can change so often, but worth considering
	# search for other people's svn bash_prompt's and look at how they do it
	# could also detect when in wp-develop and add `--depth=intermediates` arg and a warning that it didn't search the whole depth
	# could also post question on stackoverflow for help

	SVN_INFO=$(svn info 2> /dev/null)

	if [[ -z $SVN_INFO ]]; then
		exit
	fi

	# Get the current branch
	branch=$(echo "$SVN_INFO" | grep '^URL:' | egrep -o '(tags|branches)/[^/]+|trunk' | egrep -o '[^/]+$')
	if [[ -z $branch ]]; then
		branch="trunk"
	fi
	branch="${color_branch}$branch${color_reset}"

	# Determine if clean or dirty
	# Can add `--ignore-externals` to speed this up, but then it will miss modifications there.
	# Seems fast enough now that running cleanup automatically.
	if [[ $(svn stat | grep -v 'X       ' | grep -v '    X   ' | grep -v 'external item' ) ]]; then
		state="${color_dirty}dirty${color_reset}"
	else
		state="${color_clean}clean${color_reset}"
	fi

	# todo show whether repo is public or private? to help avoid accidentally commiting private to public

	echo -n "SVN $branch is $state"

	if [[ $((SECONDS-counter)) -gt 1 ]]; then
		echo "\n${color_dirty}[SVN is slow, cleaning up...]${color_reset}"
		$(svn cleanup --include-externals 2>&1)
	fi
}

function vcs_prompt {
	GIT_PROMPT=$(git_status)
	SVN_PROMPT=$(svn_status)

	if [[ -n $GIT_PROMPT ]]; then
		echo -n "\n$GIT_PROMPT"

		if [[ -n $SVN_PROMPT ]]; then
			echo -n ", $SVN_PROMPT"
		fi
	elif [[ -n $SVN_PROMPT ]]; then
		echo "\n$SVN_PROMPT"
	fi
}

function set_prompt {
	# Set marks at each prompt to enable jumping between previous commands
	command_mark=""
	if [[ 'iTerm.app' = $TERM_PROGRAM ]]; then
		# Note: This requires installing the shell integration from the iTerm2 menu.
		command_mark="$(iterm2_prompt_mark)"
	fi

	export PS1="\n${command_mark}${color_user_host}\u${color_reset} @ ${color_user_host}$hostname${color_reset} in ${color_folder}\w${color_reset} \
	$(vcs_prompt) \
	\n> "
}

# Set the prompt after every command, so the Git/SVN status is updated
export PROMPT_COMMAND="set_prompt"
