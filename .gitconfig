# todo try to find a way to clear the screen inbetween `git add -p` prompts.
# it's too hard to tell how the current hunk has been split because the previous prompt is so easy to miss
# https://www.reddit.com/r/git/comments/6mll23/is_it_possible_to_clear_the_screen_for_each_hunk/
# workaround for now is to just hit <return> if it's not obvious, because that'll spit out the help menu followed by the hunk

[user]
	name  = Ian Dunn
	email = ian@iandunn.name
	singingkey = 99B971B50343CBCB

[credential]
	helper = osxkeychain

[alias]
	#
	# add
	#
	ap = add -p
		# todo add one with word-diff=color

	#
	# checkout
	#
	co  = checkout
	cob = checkout -b
	cop = checkout -p
	cos = !sh -c \"git branch -a | grep -v remotes | grep $1 | head -n 1 | xargs git checkout\"

	#
	# commit
	#
	ci   = commit
	cia  = commit --amend
	cinv = commit --no-verify
	cim  = commit -m

	#
	# stash
	#
	pop       = stash pop
	ss        = stash show

	#
	# misc
	#
	cherp 	  = cherry-pick
	reshh 	  = reset --hard HEAD
	resp      = reset -p
	showm     = show --no-abbrev-commit --format=medium  # Appending `m` for `medium` because can't overwrite default `show` command :( -- see https://stackoverflow.com/questions/3538774/is-it-possible-to-override-git-command-by-git-alias
	amshow    = am --show-current-patch   # Useful for understanding the context when resolving merge conflicts.
	pullu     = pull --set-upstream
	# what to name this? maybe better to just memorize. for deleting remote branches. need origin name maybe. rbranchrm = push -d
	pushnv	  = push --no-verify

	# include -i to avoid `the following untracked working tree files would be overwritten by checkout...` annoyance.
	# test this out before committing though to make sure it doesn't end up including stuff you don't wanna delete in other situations
	cleanid    = clean -id

	# ideally want this to automatically run on every commit whenever it's modified in any way.
	# e.g., want the date of the commit to be the _modified_ date, not the _created_ date
	# otherwise i create a commit in a branch, the feature gets de-prioritized, then i come back a few months later and continue working
	# i squash everything down to that first few commits, but their dates are months in the past, so viewing the commit history doesn't make sense
	# you see older commits appearing before newer commits
	#
	# could try a `post-rewrite` hook. is there a way to make it apply to all repos, like how gitignore_global does?
	#	worst case could put hook in dotfiles/bin or whatever, and add symnlikn anywhere you wanna use it
	#
	# this is a step towards that, but only applies to HEAD. look for way to automate for all modified commits:
	# git rebase -i production
	# replace `pick` with `edit` for all commits
	# for each
	#   git newdate
	#   git rebase --continue
	# there's probably a better way, though
	newdate = commit --amend --date=now --no-edit

	pullas = pull --autostash
	# push = todo a bash function that checks if the current folder is wordcamp.test. if it is, then show a prompt asking if want to run pre-commit githooks.
	# defaults to no (b/c working on branch). can answer yes if ready to run over entire branch for pr, or before pushing to production branch

	#
	# branch
	#
	defbranch = !git remote show origin | grep 'HEAD branch' | cut -d' ' -f5
		# todo working now, use in commands below
		# use `git-svn` ref for git-svn

	rm-merged = !git branch -d $(git branch --merged=develop | grep -v develop) && git fetch --prune
		# todo test -- https://medium.com/@FlorentDestrema/a-simple-way-to-clean-up-your-git-project-branches-283b87478fbc

	# rename this to just `branch` if git every starts allowing aliases to override commands
	tracking = branch -vv

	# e.g., git track origin/28-elasticsearch
	track = branch -u


	#
	# diff
	#
	diffc   = diff --cached
	diffno	= diff trunk --name-only
		# detect main branch automatically
		# git remote show origin | sed -n '/HEAD branch/s/.*: //p'
			# https://stackoverflow.com/questions/28666357/git-how-to-get-default-branch works but is slow b/c http request
		# maybe set some kind of variable based on path, or switch case?
		# git symbolic-ref refs/remotes/origin/HEAD | sed 's@^refs/remotes/origin/@@' works and is local, but isn't reliable
		# git rev-parse --abbrev-ref origin/HEAD works but need to strip out origin/ can do with bash if make this a ! command
	diffnob = !git diff |grep -v build

	# in general, this is better for diffing a string of text, especially longer strings
	# it's often better for seeing code changes too, but sometimes the standard line-by-line is better
	diffw = diff --word-diff=color
		# this doesn't show trailing whitespace. can you make it do that?
	diffwc = diffw --cached

	# this is sometimes better than `diffw`, but is often much worse
	diffwr = diff --word-diff=color --word-diff-regex="[A-Za-z0-9. ]|[^[:space:]]"
		# try this as the default for awhile
		# if don't want it majorty of time, then change it to `worddiff` alias
		#
		# is there a way to get this git `add -p` ?

#	diffs = ! GIT_EXTERNAL_DIFF=/usr/bin/diff GIT_DIFF_OPTS="-y -W 250" git diff 	# s for "split"
		# not working
#	diffs = !/usr/bin/diff -y -W 250

	# note: for this to work, deltawalker has to be configured to follow symlinks
	#difftool = difftool --dir-diff
		# huh not working

	#
	# log
	#
	logdef = log ...production
		# use `defbranch` alias once working
		# see comments around `phpcs-changed-git` for notes on getting default
	logorg = log ...origin
		# should compare current local branch to current remote branch. might works on production, might not work on untracked branches
	logm   = log --no-abbrev-commit --format=medium
	logsvn = log ...git-svn

	#
	# rebase
	#
	reba	 = rebase --abort
	rebc	 = rebase --continue
	rebi     = rebase -i production # todo get default branch, since prod is only for wordcamp repo
	rebio    = rebase -i origin
	rebisvn  = rebase -i git-svn
	pullreb  = !git co production && git pull && git co - && git rebase production
		# use `defbranch` once working
		# also stash before, and pop after
	svnrebase = !git stash && git svn rebase --log-window-size=100000 && git stash pop
		# todo don't do ^ if there's already something in stash, b/c when have conflicts it gets all messed up. er, or is it because left in stash after fix conflict? i think it's the latter
	svnrebasemirror = !git checkout master && git pull origin master && git svn rebase && git push origin master
	squash-all = "!f(){ git reset $(git commit-tree HEAD^{tree} -m \"${1:-Squashed all commits}\");};f"

	# rebase current branch against given branch, and override any conflicts with the code in the current branch. note that "theirs" in this context refers to the current branch, which is the opposite of what it means in the context of a merge.
	#rebtheirs = rebase -Xtheirs
		# er, no, that resulted in lost changes
		# maybe do `git rebase production`, then run `git co <file> --ours` for each conflict that comes up?
		# that's less convenient, but didn't result in same lots of losses
		# it did result in some minor losses], though, which still is a dealbreaker. need to udnerstand more and try in other contexts before start using it blindly

	#
	# status
	#
	st 		 = status
	stat     = status
		# make ^ default to current directory only, then create alias for all files
	statlong = status --long


[diff]
#	tool = dw
#	noprefix = true
	#external = '/Applications/DeltaWalker.app/Contents/Resources/git-diff'

#	relative = true
		# not working

#	wordRegex="[A-Za-z0-9. ]|[^[:space:]]"
		# useful in some scenarios, but really bad in others

# trying to make word diff the default
#external = "git diff --word-diff=color"

[difftool]
	prompt = false

[difftool "dw"]
	cmd = '/Applications/DeltaWalker.app/Contents/Resources/git-diff' "$LOCAL" "$REMOTE"
	# remote doesn't show up

[branch]
	autosetuprebase = always

[format]
	# Want this for `log`, but not `show`. Doesn't seem like there's a way to do that, and I use `log` much more than `show`, so just created `showm` alias as workaround.
	pretty = oneline

[log]
	# The full hash is unnecessary in most contexts, and clutters the screen.
	abbrevCommit = true

[merge]
	tool = deltawalker

# Note: PHPStorm's diff tool seems better for resolving merge conflicts. Need Git plugin enabled.
[mergetool "deltawalker"]
	cmd = '/Applications/DeltaWalker.app/Contents/Resources/git-merge' "$LOCAL" "$REMOTE" "$BASE" "$MERGED"

[core]
	excludesfile = ~/.gitignore_global

[push]
	default = current
	forceWithLease = true

[pull]
	rebase = true

[rebase]
	abbreviateCommands = true
	#autostash = true
		# seems like would be convenience, but could be dangerous. need to research/test first

[color]
	ui = true

[status]
	short = true
	showStash = true

[stash]
	showStat = false
	showPatch = true

[commit]
	gpgsign = true

[gpg]
	program = gpg

[svn]
	rmdir = true

	# `true` would break `git svn fetch` by trying to sign other people's commits. Is there a way around that? Does it even matter?
#	gpgsign = false
# see if ^ breaks git svn rebase && git push for wordcamp
# huh, disabling it doesn't seem to have any effect. it doesn't even try to sign git svn commits

[init]
	# Some other options: production, stable, release, base, default, trunk, main, primary.
	defaultBranch = develop

[include]
	# This allows per-machine customizations.
	path = .gitconfig.local
