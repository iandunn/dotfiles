# todo try to find a way to clear the screen inbetween `git add -p` prompts. 
# it's too hard to tell how the current hunk has been split because the previous prompt is so easy to miss
# https://www.reddit.com/r/git/comments/6mll23/is_it_possible_to_clear_the_screen_for_each_hunk/
# workaround for now is to just hit <return> if it's not obvious, because that'll spit out the help menu followed by the hunk

[user]
	name  = Ian Dunn
	email = ian@iandunn.name
	singingkey = 99B971B50343CBCB

[credential]
	helper = osxkeychain

[alias]
	co       = checkout
	ci       = commit
	cinv	 = commit --no-verify
	cherp	 = cherry-pick
	logdef   = log ...production
		# make ^ automatically pick the default branch for git, and `git-svn` ref for git-svn
		# see comments around `phpcs-changed-git` for notes on getting default
	logm     = log --no-abbrev-commit --format=medium
	pullas	 = pull --autostash
	# push = todo a bash function that checks if the current folder is wordcamp.test. if it is, then show a prompt asking if want to run pre-commit githooks. defaults to no (b/c working on branch). can answer yes if ready to run over entire branch for pr, or before pushing to production branch
	reba	 = rebase --abort
	rebc	 = rebase --continue
	rebi     = rebase -i production # todo get default branch, since prod is only for wordcamp repo
	stat     = status
	statlong = status --long
	showm    = show --no-abbrev-commit --format=medium  # Appending `m` for `medium` because can't overwrite default `show` command :( -- see https://stackoverflow.com/questions/3538774/is-it-possible-to-override-git-command-by-git-alias
	diffc    = diff --cached
	svnrebase = !git stash && git svn rebase --log-window-size=100000 && git stash pop
		# todo don't do ^ if there's already something in stash, b/c when have conflicts it gets all messed up. er, or is it because left in stash after fix conflict? i think it's the latter
	stashshow = "!git stash show -p stash@{\"$1\"} #"
	svnrebasemirror = !git checkout master && git pull origin master && git svn rebase && git push origin master

	# ideally want this to automatically run on every commit whenever it's modified in any way.
	# e.g., want the date of the commit to be the _modified_ date, not the _created_ date
	# otherwise i create a commit in a branch, the feature gets de-prioritized, then i come back a few months later and continue working
	# i squash everything down to that first few commits, but their dates are months in the past, so viewing the commit history doesn't make sense
	# you see older commits appearing before newer commits
	#
	# this is a step towards that, but only applies to HEAD. look for way to automate for all modified commits
	newdate = commit --amend --date=now --no-edit

[diff]
	tool = dw
	noprefix = true
	#external = '/Applications/DeltaWalker.app/Contents/Resources/git-diff'

[difftool]
	prompt = false

[difftool "dw"]
	cmd = '/Applications/DeltaWalker.app/Contents/Resources/git-diff' "$LOCAL" "$REMOTE"
	# remote doesn't show up

[branch]
	autosetuprebase = always

[format]
	# Want this for `log`, but not `show`. Doesn't seem like there's a way to do that, and I use `log` much more than `show`, so just created `showm` alias as workaround.
	pretty = oneline

[log]
	# The full hash is unnecessary in most contexts, and clutters the screen.
	abbrevCommit = true

[merge]
	tool = deltawalker

[mergetool "deltawalker"]
	cmd = '/Applications/DeltaWalker.app/Contents/Resources/git-merge' "$LOCAL" "$REMOTE" "$BASE" "$MERGED"

[core]
	excludesfile = ~/.gitignore_global

[push]
	default = current

[pull]
	rebase = true

[rebase]
	abbreviateCommands = true
	#autostash = true
		# seems like would be convenience, but could be dangerous. need to research/test first

[color]
	ui = true

[status]
	short = true
	showStash = true

[commit]
	gpgsign = true

[gpg]
	program = gpg

[svn]
	rmdir = true

	# `true` would break `git svn fetch` by trying to sign other people's commits. Is there a way around that? Does it even matter?
#	gpgsign = false
# see if ^ breaks git svn rebase && git push for wordcamp
# huh, disabling it doesn't seem to have any effect. it doesn't even try to sign git svn commits
